name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.22.0'

      - name: Install Dependencies (Linux)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libgtk-3-dev libglu1-mesa-dev libsoil-dev
          sudo apt-get install -y libwxgtk3.0-gtk3-dev wx3.0-headers wx-common

      - name: Install Dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install wxwidgets --version=3.1.5
          mkdir libs/SOIL
          curl -L -o libs/SOIL/SOIL.zip https://github.com/littlstar/SOIL/archive/refs/heads/main.zip
          powershell -Command "Expand-Archive libs/SOIL/SOIL.zip -DestinationPath libs/SOIL/"
          move libs/SOIL/SOIL-main/* libs/SOIL/

      - name: Create build directory
        run: mkdir -p build

      - name: Configure CMake
        working-directory: ${{ github.workspace }}
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DwxWidgets_ROOT_DIR=/usr/lib/x86_64-linux-gnu/wx -DwxWidgets_CONFIG_EXECUTABLE=/usr/bin/wx-config

      - name: Build Project
        run: cmake --build build --config Release

      - name: Compress Release Directory (Linux)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          cd build
          tar -czvf release.tar.gz release

      - name: Compress Release Directory (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd build
          powershell Compress-Archive -Path release -DestinationPath release.zip

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wxOpenGLApp-${{ matrix.os }}-build
          path: |
            build/release.zip
            build/release.tar.gz

      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset (Linux)
        if: matrix.os == 'ubuntu-22.04'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/release.tar.gz
          asset_name: release-${{ matrix.os }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/release.zip
          asset_name: release-${{ matrix.os }}.zip
          asset_content_type: application/zip
